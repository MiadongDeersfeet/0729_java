package com.kh.chap02_byte.model.dao;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

// DAO(Data Access Object)
// 데이터가 보관되어있는 공간에 직접 접근해서
// 입력/출력하는 메소드들을 만들어줌
public class FileByteDao { //외부매체랑 입출력하는 메소드를 DAO 패키지에 넣는 거라고????
	
	// 파일에 데이터를 출력(Byte Stream 사용)
	public void outputToFile() {
		
		// 출력 : 프로그램 내의 데이터를 밖으로 내보내겠다.
		// 프로그램 --> 외부(파일)
		// 내꺼에서 밖으로 나가는 프로그램명은 전부다 OutputStream 으로 끝난다.
		// 그런데 우리는 파일로 내보내고 싶은 거라서 앞에 File까지 붙여준다.
		// FileOutputStream : "파일"로 데이터를 출력할 때, 파일과 연결하는 1Byte 단위의 스트림
		
		// 1. FileOutputStream 객체 생성
		// 파일과 연결하는 스트림을 생성하는 과정
		FileOutputStream fos = null;
		
		try {
		fos = new FileOutputStream("a_byte.txt"/*,true*/);
		// 매개변수 생성자 호출 시
		// 두 번째 인자로 true 값을 전달한다면 => 해당 파일 내용에 이어서 작성
		// 안쓰면 => 덮어쓰기
		
		
		// 2. 연결통로를 가지고 데이터를 출력 : write() 호출
		fos.write(97);
		fos.write(98);
		fos.write(99);
		
		byte[] arr = {101, 102, 103};
		fos.write(arr);
		
		fos.write('A');
		fos.write('B');
		
		fos.write('김');
		fos.write('윤');
		fos.write('기');
		
		// 1Byte의 범위 : -128 ~ 127
		// 한글은 2Byte 이기 때문에 깨짐
		// 바이트 스트림으로는 한글 / 일어 / 한자 해결이 안됨
		// 문자 스트림을 사용해야 해결이 가능
		
		// 3. 스트림 사용이 끝났다면 반드시 꼭 무조건 절대로 너무너무 해야하는 작업이 있음
		// 코드상에서 사용이 전부 종료되었다면 자원반납을 해주어야함 <-- 약속☆★
		// 너무 정말정말정말정말정말정말정말정말정말정말중요중요중요중요중요중요중요중요중요한 약속
		
		// 자원반납 하는 방법 ☆★☆★☆★☆☆★☆★☆★
		// .close() ☆★☆★☆★☆★☆★☆★☆★
		// fos.close();   <-- 근데 여기 있으면 안돼요. 중간에 예외발생으로 캐치돼서 건너뛰어질 수가 있거든요. 근본으로는 스코프 밖으로 나가야하는데 ....
		// G.C 가배지컬렉터가 수집을 안하기 때문에 스스로 반납해야한다. 안 그러면 터진다~~~~~~ ☆★☆★☆★☆★
		// 스캐너도 원래는 sc.close(); 해주셔야합니다. ☆★☆★☆★☆★
		
		return;
		} catch(FileNotFoundException e) {
			e.printStackTrace();
			
		} catch(IOException e) {
			e.printStackTrace();
			
		  return;
		  
		} finally { // 어디에서 return 하던지 무조건!!! finally 블럭 안에 있는 구문을 수행
		
		try {
			if(fos != null) {
		fos.close(); // fos가 null이 아닐 때만 해야해요. 위에 메소드에서 null을 대입했잖아. // 위에 return 들이 있어도 무조건 지킬 수 있는 방법이 있다.
			}
		} catch(IOException e) {
			e.printStackTrace();
		}
		// 생성자 호출 시 인자값으로 파일명을 전달하는데 파일명이 존재하지 않을 경우
		// 해당 파일을 생성하면서 통로를 연결
		
		}
		
	}
	
	
	// 프로그램 <== 외부매체(파일)
	// 입력 : 파일로부터 데이터를 가지고 오겠다.
	// FileInputStream
	// 파일로부터 데이터를 가져와서 입력받을 건데, 1Byte 단위로 입력받겠다.
	public void input() {
		
		FileInputStream fis = null;
		
		try {
			//1. 객체 생성 => 스트림 연결하기
		fis = new FileInputStream("a_byte.txt");
		
		// 2. 스트림으로 입력받기
		// read() 호출
		// 1Byte 단위로 읽어옴
		/*System.out.println((char)fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read());
		System.out.println(fis.read()); 
		System.out.println(fis.read()); 
		System.out.println(fis.read()); 
		System.out.println(fis.read()); */
		//파일의 마지막 데이터를 입력받고 나서 read()를 호출 시 -1을 반환
		/*
		while(true) {
			int value = fis.read();
			if(value != -1) {
				System.out.println(value);
			} else {
				break;
			}
		}
		*/
			
		int value = 0;
		while((value = fis.read()) != -1) {
			System.out.println((value));
		}
			
		
		
		
		} catch(FileNotFoundException e) {
			e.printStackTrace();
		} catch(IOException e) {
			e.printStackTrace();
		} finally {
			try { 
				if(fis != null) {
				fis.close();
				}
			} catch(IOException e) {
				e.printStackTrace();
			}
		}
	}

}
